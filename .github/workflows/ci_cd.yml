name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
env:
  MAIN_PYTHON_VERSION : '3.10'
  PACKAGE_NAME: 'ansys_sphinx_theme'
  DOCUMENTATION_CNAME: 'sphinxdocs.ansys.com'
  MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
  MEILISEARCH_PUBLIC_API_KEY: ${{ secrets.MEILISEARCH_PUBLIC_API_KEY }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: "Run Ansys code style checks"
        uses: ansys/actions/code-style@v7
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: Doc style
    runs-on: ubuntu-latest
    steps:
      - name: "Run Ansys documentation style checks"
        uses: ansys/actions/doc-style@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  update-changelog:
    name: "Update CHANGELOG (on release)"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v7
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

  doc-build:
    name: Doc building
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v7
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          add-pdf-html-docs-as-assets: true
          requires-xvfb: true
          dependencies: 'pandoc'

  doc-deploy-development:
    name: Doc dev version deploy
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build-library
    steps:
      - name: "Deploy developers documentation"
        uses: ansys/actions/doc-deploy-dev@v7
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: Doc stable version deploy
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: "Deploy stable documentation"
        uses: ansys/actions/doc-deploy-stable@v7
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  smoke-tests:
    name: Build and smoke tests
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: "Build wheelhouse and perform smoke test"
        uses: ansys/actions/build-wheelhouse@v7
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [doc-build, smoke-tests]
    steps:
      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v7
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  release:
    name: "Release project to private PyPI, public PyPI and GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library, update-changelog]
    runs-on: ubuntu-latest
    steps:

      - name: "Release to the private PyPI repository"
        uses: ansys/actions/release-pypi-private@v7
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: "Release to the public PyPI repository"
        uses: ansys/actions/release-pypi-public@v7
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v7
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  doc-index-dev:
    name: "Deploy dev index docs"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: doc-deploy-development
    steps:
      - name: "Deploy the latest documentation index"
        uses: ansys/actions/doc-deploy-index@v7
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}/version/dev
          index-name: "ansys-sphinx-theme-vdev"
          host-url: ${{ vars.MEILISEARCH_HOST_URL }}
          api-key: ${{ env.MEILISEARCH_API_KEY }}

  doc-index-stable:
    name: "Deploy stable docs index"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: doc-deploy-stable
    steps:
      - name: "Install Git and clone project"
        uses: actions/checkout@v4

      - name: "get version of library"
        shell: bash
        run: |
          python -m pip install -e .

      - name: Scrape the stable documentation to PyMeilisearch
        run: |
          VERSION=$(python -c "from ansys_sphinx_theme import __version__; print('.'.join(__version__.split('.')[:2]))")
          VERSION_MEILI=$(python -c "from ansys_sphinx_theme import __version__; print('-'.join(__version__.split('.')[:2]))")
          echo "Calculated VERSION: $VERSION"
          echo "Calculated VERSION_MEILI: $VERSION_MEILI"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_MEILI=$VERSION_MEILI" >> $GITHUB_ENV

      - name: "Deploy the latest documentation index"
        uses: ansys/actions/doc-deploy-index@v7
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}/version/${{ env.VERSION }}
          index-name: ansys-sphinx-theme-v${{ env.VERSION_MEILI }}
          host-url: ${{ vars.MEILISEARCH_HOST_URL }}
          api-key: ${{ env.MEILISEARCH_API_KEY }}
